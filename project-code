#define CUSTOM_SETTINGS
#define INCLUDE_GPS_SHIELD
#define INCLUDE_SMS_SHIELD
#define INCLUDE_INTERNET_SHIELD
#define INCLUDE_CAMERA_SHIELD
#define INCLUDE_FACEBOOK_SHIELD
#define INCLUDE_TWITTER_SHIELD
#define INCLUDE_PATTERN_SHIELD

#include <OneSheeld.h>

float longitude;
float latitude;

HttpRequest immobRequest("https://api.thingspeak.com/channels/228392/fields/3/last.json"); //For checking the immobilization boolean (0,1)

HttpRequest request("https://api.thingspeak.com/update"); //This and the following 3 lines are for writing the longitude and latitude to thingspeak channel
const char *myWriteAPIKey = "KY6FGVBF9MNSM8B0";
char charSensor[11];

//boolean stolen = false; //Starts off not stolen (obviously)
//boolean locked = true; //Vehicle starts off locked as that is the state a vehicle would most often be in
//boolean moving = false; //Not sure if we care about whether or not the vehicle is moving???

//There is a boolean held on the thingspeak channel that controls the immobilization remotely (simulated remote shutdown)

int stolenPin = 13;
int lockedPin = 12;
int movingPin = 11;
int keyPin = 10;

int delayRequestPin = 7;
int delayImmobPin = 6;

int keyButPin = 2;
int switchState = 0;

int count = 0;
const int autoLockTime = 3;
int immob = 0;

int state = 0;
PatternNode oldPattern[] = { {0,0}, {1,1}, {2,2} };
PatternNode *incomingPattern;
boolean patternMatch = true;

void setup() {
  OneSheeld.begin();
  immobRequest.setOnSuccess(&onSuccess);

  request.addParameter("api_key", myWriteAPIKey);
  pinMode(stolenPin, OUTPUT);
  pinMode(lockedPin, OUTPUT);
  pinMode(movingPin, OUTPUT);
  pinMode(keyPin, OUTPUT);
  pinMode(delayRequestPin, OUTPUT);
  pinMode(delayImmobPin, OUTPUT);
  pinMode(keyButPin, INPUT);
  longitude = GPS.getLongitude();
  latitude = GPS.getLatitude();
  delay(5000);
  digitalWrite(lockedPin, HIGH);
}



void loop() {
  switch (state)
  {
    case 0:
      locked();
      break;
    case 1:
      stolen();
      break;
    case 2:
      immobilised();
      break;
    case 3:
      moving();
      break;
    case 4:
      //unlocked();
      break;
  }
}

void locked()
{
  /*
    digitalWrite(keyPin, HIGH);
    delay(5000);
    switchState = digitalRead(2);
    digitalWrite(keyPin, LOW); */
  if (0)//!GPS.isInRange(latitude, longitude, 100))
  {
    state = 1;
    carStolen();
  }
  else
  {
    int  patternLength;
    if(Pattern.isNewPatternReceived())
    {
      incomingPattern = Pattern.getLastPattern();
      patternLength = Pattern.getLastPatternLength();
    }
    if(patternLength == 3)
    {
      for(int i=0; i < patternLength; i++)
      {
        if(oldPattern[i]==incomingPattern[i] && patternMatch)
        {
        }
        else
        {
          patternMatch = false;
        }
      }
    }
    if (patternMatch)
    {
      state = 4;
      //locked = false;
      digitalWrite(lockedPin, LOW);
    }
  }
}

void stolen()
{
  Internet.performGet(immobRequest);
  delay(1000);
  if (immob) //Checks the value of the immobilizer boolean (0,1) on the thingspeak and simulates the shutdown of the vehicle
  {
    state = 2;
    //locked = true;
    digitalWrite(lockedPin, HIGH);
    //Simulated shutdown of vehicle and be unable to restart it without the assigned "key" (Button)
  }
  trackVehicle();
}

void immobilised()
{
  digitalWrite(keyPin, HIGH);
  delay(5000);
  switchState = digitalRead(2);
  digitalWrite(keyPin, LOW);
  if (switchState) //This will unlock the immobilizer and the vehicle and perform an update of the location of the vehicle
  {
    state = 0;
    immobOff();
  }
}

void moving()
{
  if (!GPS.isInRange(latitude, longitude, 100)) //GPS.isInRange does not function as it should, so we replaced it with a button press for the moment.
  {
    //moving = true;
    digitalWrite(movingPin, HIGH);
    trackVehicle();
  }
  else
  {
    delay(1000);
    digitalWrite(keyPin, HIGH);
    delay(5000);
    switchState = digitalRead(2);
    digitalWrite(keyPin, LOW);
    count++;
    if (count == autoLockTime)
    {
      state = 0;
      //locked = true;
      //moving = false;
      digitalWrite(lockedPin, HIGH);
      digitalWrite(movingPin, LOW);
      count = 0;
    }
    else if (switchState)
    {
      state = 0;
      //locked = true;
      //moving = false;
      digitalWrite(lockedPin, HIGH);
      digitalWrite(movingPin, LOW);
      count = 0;
    }
    if (!locked)
    {
      delay(10000);
    }
  }
}

/*
if (stolen)
{
  if (!immob)
  {
    Internet.performGet(immobRequest);
    delay(1000);
    if (immob) //Checks the value of the immobilizer boolean (0,1) on the thingspeak and simulates the shutdown of the vehicle
    {
      locked = true;
      digitalWrite(lockedPin, HIGH);
      //Simulated shutdown of vehicle and be unable to restart it without the assigned "key" (Button)
    }
    trackVehicle();
  }
  else
  {
    digitalWrite(keyPin, HIGH);
    delay(5000);
    switchState = digitalRead(2);
    digitalWrite(keyPin, LOW);
    if (switchState) //This will unlock the immobilizer and the vehicle and perform an update of the location of the vehicle
    {
      immobOff();
    }
  }
}

else if (locked)
{
  digitalWrite(keyPin, HIGH);
  delay(5000);
  switchState = digitalRead(2);
  digitalWrite(keyPin, LOW);
  if (switchState)//!GPS.isInRange(latitude, longitude, 100)) //GPS.isInRange does not function as it should, so we replaced it with a button press for the moment.
  {

    carStolen();
  }
  else
  {
    delay(1000);
    digitalWrite(keyPin, HIGH);
    delay(5000);
    switchState = digitalRead(2);
    digitalWrite(keyPin, LOW);
    if (switchState)
    {
      locked = false;
      digitalWrite(lockedPin, LOW);
    }
  }
}
else
{
  digitalWrite(keyPin, HIGH);
  delay(5000);
  switchState = digitalRead(2);
  digitalWrite(keyPin, LOW);
  if (switchState)//!GPS.isInRange(latitude, longitude, 100)) //GPS.isInRange does not function as it should, so we replaced it with a button press for the moment.
  {
    moving = true;
    digitalWrite(movingPin, HIGH);
    trackVehicle();
  }
  else
  {
    delay(1000);
    digitalWrite(keyPin, HIGH);
    delay(5000);
    switchState = digitalRead(2);
    digitalWrite(keyPin, LOW);
    count++;
    if (count == autoLockTime)
    {
      locked = true;
      moving = false;
      digitalWrite(lockedPin, HIGH);
      digitalWrite(movingPin, LOW);
      count = 0;
    }
    else if (switchState)
    {
      locked = true;
      moving = false;
      digitalWrite(lockedPin, HIGH);
      digitalWrite(movingPin, LOW);
      count = 0;
    }
    if (!locked)
    {
      delay(10000);
    }
  }
}

} //END OF loop()*/

void carStolen()
{
  Camera.frontCapture();                                                                                                                        //Take photo of thief
  SMS.send("0876762250", "Your car has been stolen. The security company has been informed. You can track your car on our website http://websiteURLhere/"); //Notify car owner
  SMS.send("0876762250", "Car belonging to Mary has been stolen. It is a red VW Golf. Registration is 01 C 12345");                                                       // Notify emergency line
  Facebook.postLastPicture("this is the person that stole my car" , FROM_ONESHEELD_FOLDER);
  Twitter.tweetLastPicture("status to be posted on facebook along the picture" , FROM_ONESHEELD_FOLDER);
} //END OF carStolen()

void immobOff() //Turn off the immobiliser and update the local and remote immobilise variables
{
  //locked = false;                                   //Set locked variable to false
  //stolen = false;                                   //Set stolen variable to false
  digitalWrite(stolenPin, LOW);                     //Turn on visual LED for stolen
  digitalWrite(lockedPin, LOW);                     //Turn on visual LED for locked
  request.addParameter("field3", "0");              //Add the immobilise variable to request to set remote immobilise variable to 0 while also updating the location
  Internet.performPost(request);                    //Perform update to Thingspeak site
  delay(1000);                                      //Short delay to allow request to complete properly as a safeguard
  immob = 0;                                        //Set local immobilise variable to false
  request.deleteParameters();                       //Remove all parameters from request so as not to update the remote immobilise variable while updating location in trackVehicle()
  request.addParameter("api_key", myWriteAPIKey);   //Re-add api key to request
  digitalWrite(delayImmobPin, HIGH);                //Turn on delay LED to show there is a long delay occuring
  delay(20000);                                     //20 second delay
  digitalWrite(delayImmobPin, LOW);                 //Turn off delay LED
}//END OF immobOff()

void trackVehicle()
{
  longitude = GPS.getLongitude();                 //Get Longitude
  latitude = GPS.getLatitude();                   //Get Latitude
  dtostrf(longitude, 10, 6, charSensor);          //Convert float longitude to char array
  request.addParameter("field1", charSensor);     //Add longitude char array as parameter to the request
  dtostrf(latitude, 10, 6, charSensor);           //Convert float latitude to char array
  request.addParameter("field2", charSensor);     //Add longitude char array as parameter to the request
  Internet.performPost(request);                  //Perform update to Thinspeak site
  digitalWrite(delayRequestPin, HIGH);            //Turn on delay LED to show there is a long delay occuring
  delay(20000);                                   //20 second delay
  digitalWrite(delayRequestPin, LOW);             //Turn off delay LED
} //END OF trackVehicle()

void onSuccess(HttpResponse &response)
{
  char *immobTxt = response.getBytes();
  immob = atoi(immobTxt);
}//END OF onSuccess()
