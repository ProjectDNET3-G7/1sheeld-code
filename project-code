#define CUSTOM_SETTINGS
#define INCLUDE_GPS_SHIELD
#define INCLUDE_SMS_SHIELD
#define INCLUDE_INTERNET_SHIELD
#define INCLUDE_CAMERA_SHIELD
#define INCLUDE_TERMINAL_SHIELD

#include <OneSheeld.h>

float longitude = GPS.getLongitude();
float latitude = GPS.getLatitude();

HttpRequest immobRequest("https://api.thingspeak.com/channels/228392/fields/3/last.json"); //For checking the immobilization boolean (0,1)

HttpRequest request("https://api.thingspeak.com/update"); //This and the following 3 lines are for writing the longitude and latitude to thingspeak channel
const char *myWriteAPIKey = "KY6FGVBF9MNSM8B0";
char charSensor[11];

boolean moving = false; //Not sure if we care about whether or not the vehicle is moving???
boolean locked = true; //Vehicle starts off locked as that is the state a vehicle would most often be in
boolean stolen = true; //Starts off not stolen (obviously)
//There is a boolean held on the thingspeak channel that controls the immobilization remotely (simulated remote shutdown)
boolean tagSet = false;
int switchState = 0;

int ledPin = 13;
int keyLED = 12;
int keyPin = 2;
int count = 0;
const int autoLockTime = 3;
int immob = 1;

void setup() {
  OneSheeld.begin();
  immobRequest.setOnSuccess(&onSuccess);
  immobRequest.getResponse().setOnJsonResponse(&immobRequestSuccess);

  request.addParameter("api_key",myWriteAPIKey);
  pinMode(ledPin, OUTPUT);
  pinMode(keyPin, INPUT);
  pinMode(keyLED, OUTPUT);
}

//when locked LED is lit


void loop() {



if (stolen)
{
  Terminal.println(immob);
  if (immob)
  {
    digitalWrite(keyLED, HIGH);
    delay(5000);
    switchState = digitalRead(2);
    digitalWrite(keyLED, LOW);
      if(switchState) //This will unlock the immobilizer and the vehicle and perform an update of the location of the vehicle
      {
        immobOff();
        /*
        locked = false;
        request.addParameter("field3",0);
        Internet.performPost(request);
        request.deleteParameters(); //Required so as not to update the immobilized value while performing tracking
        request.addParameter("api_key",myWriteAPIKey); //Reapply the api_key to the HttpRequest to be able to write the coordinates while tracking
        */
      }
  }
  else
  {
    Internet.performGet(immobRequest);
    //.println("A");
    Terminal.println(immob);
    delay(1000);
    if(immob) //Checks the value of the immobilizer boolean (0,1) on the thingspeak and simulates the shutdown of the vehicle
    {
      digitalWrite(ledPin, HIGH);
      //Terminal.println("B");
      //Simulated shutdown of vehicle and be unable to restart it without the assigned "key" (NFC tag)
    }
    trackVehicle();
  }
  
  
}

else if (locked)
{
  if (!GPS.isInRange(latitude, longitude, 20))
  {
    moving = true;
    carStolen();
  }
  else
  {
    digitalWrite(keyLED, HIGH);
    delay(5000);
    switchState = digitalRead(2);
    digitalWrite(keyLED, LOW);
    if(switchState)
    {
      locked = false;
    }
  }
}
else
{
  if (!GPS.isInRange(latitude, longitude, 20))
  {
    moving = true;
    trackVehicle();
    delay(20000);
  }
  else
  {
    digitalWrite(keyLED, HIGH);
    delay(5000);
    switchState = digitalRead(2);
    digitalWrite(keyLED, LOW);
    count++;
    if (count == autoLockTime)
    {
      locked = true;
      count = 0;
    }
    else if(switchState)
    {
      locked = true;
      count = 0;
    }
  }
}

} //END OF loop()

void carStolen()
{
Camera.frontCapture();
SMS.send("0861231234","Your car has been stolen. The security company has been informed. You can track your car on our website //hhtp:www"); //Notify car owner
SMS.send("0867897890","Car belonging to XXX has been stolen. It is a blah blah car."); // Notify emergency line
stolen = true;
} //END OF carStolen()

void immobOff()
{
  locked = false;
  request.deleteParameters();
  request.addParameter("api_key", myWriteAPIKey);
  request.addParameter("field3", "0");
  Internet.performPost(request);
  delay(1000);
  immob = 0;
  request.deleteParameters();
  request.addParameter("api_key", myWriteAPIKey);
  delay(20000);
}

void trackVehicle()
{
  longitude = GPS.getLongitude();
  latitude = GPS.getLatitude();
  dtostrf(longitude, 10, 6, charSensor);
  request.addParameter("field1", charSensor);
  dtostrf(latitude, 10, 6, charSensor);
  request.addParameter("field2", charSensor);
  Internet.performPost(request);
  delay(20000);
} //END OF trackVehicle()

void onSuccess(HttpResponse &response)
{
  Terminal.println("F");
  response["field3"].query();
}
void immobRequestSuccess(JsonKeyChain &chain , char *value )
{
  Terminal.println("D");
  Terminal.println(value);
  Terminal.println("E");
  sscanf(value, "%d", &immob);
  //Terminal.println(immob);
}
